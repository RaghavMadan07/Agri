
version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:3.9-management-alpine
    ports:
      - '5673:5672' # For AMQP protocol
      - '15673:15672' # For web management interface
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:13-alpine
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: cropic_db
    ports:
      - '5434:5432'
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d cropic_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  ml_service:
    build: ./ml_service
    ports:
      - '8001:8001'
    volumes:
      - ./uploads:/app/uploads
    command: uvicorn main:app --host 0.0.0.0 --port 8001

  analysis_worker:
    build: ./analysis_worker
    volumes:
      - ./uploads:/app/uploads
    environment:
      DATABASE_URL: postgres://user:password@postgres:5432/cropic_db
      ML_API_URL: http://ml_service:8001
      RABBITMQ_URL: amqp://rabbitmq
    depends_on:
      postgres:
        condition: service_healthy
      ml_service:
        condition: service_started
      rabbitmq:
        condition: service_healthy

  data_fusion_worker:
    build: ./data_fusion_worker
    environment:
      DATABASE_URL: postgres://user:password@postgres:5432/cropic_db
      RABBITMQ_URL: amqp://rabbitmq
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  ingestion_api:
    build: ./ingestion_api
    ports:
      - '3000:3000'
    volumes:
      - ./ingestion_api:/app
      - ./uploads:/app/uploads
      - /app/node_modules
    environment:
      DATABASE_URL: postgres://user:password@postgres:5432/cropic_db
      RABBITMQ_URL: amqp://rabbitmq
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  dashboard_api:
    build: ./dashboard_api
    ports:
      - '8002:8002'
    environment:
      DATABASE_URL: postgres://user:password@postgres:5432/cropic_db
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres_data:
